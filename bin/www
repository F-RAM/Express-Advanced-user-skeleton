/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
const http = require('http');
const debug = require('debug')('canevas:server');
const dotenv = require('dotenv').config({path: __dirname + '/../config.env'});

/**
 * UNCAUGHT EXCPETIONS. Mostlfy for sporadic errors
 */
process.on('uncaughtException', err => {
  console.log('UNHANDLED EXCEPTION! ðŸ’¥ðŸ’¥ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  process.exit(1);
});

const app = require('./../app');
/**
 * Database Connection
 */
const DB = process.env.DATABASE.replace('<PASSWORD>', process.env.DATABASE_PASSWORD);

// mongoose.connect(DB, {
mongoose.connect(process.env.DATABASE_LOCAL, {
  useNewUrlParser: true,
  useCreateIndex: true,
  useFindAndModify: false,
  useUnifiedTopology: true,

}).then(() => console.log('Database connection successful'));

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Unhandled Rejections, mostly for promises errors.
 */

process.on('unhandledRejection', err => {
  console.log('UNHANDLED REJECTIONS! ðŸ’¥ðŸ’¥ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  // debug('Listening on %o ', bind);
  console.log('Listening on %o ', bind);

}